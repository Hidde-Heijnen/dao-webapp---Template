name: UI Tests

on:
  workflow_dispatch:
  push:
    branches: ['master', 'dev']
  pull_request:
    branches: ['master', 'dev']

env:
  NODE_VERSION: 18.x
  VITE_DAO_ADDRESS: '0xa23ff5fc643b1a8d5866f5b392dc5924b746c6fd'
  VITE_VOTING_PLUGIN: '0xfc9ef7e0ea890e86864137e49282b21a0a1f6e5e'
  VITE_REP_CONTRACT: '0xdAC85cFabEF4da96D426185Ea050d9A947bE1C5f'
  VITE_PREFERRED_NETWORK_ID: 5
  VITE_API_URL: 'http://localhost:43210/api'
  VITE_VERIFY_CONTRACT: '0x...'
  VITE_USE_GANACHE: 'false'

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-

  jest-unit-tests:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v3
      - name: Restore npm cache
        uses: actions/cache@v3
        id: restore-node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.restore-node_modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: run tests
        run: npm run test

  build-storybook:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v3
      - name: Restore npm cache
        uses: actions/cache@v3
        id: restore-node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.restore-node_modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build Storybook
        run: npm run build-storybook
      - name: Cache Storybook
        uses: actions/cache@v3
        with:
          path: |
            **/storybook-static
          key: ${{ runner.os }}-storybook-${{ hashFiles('src/components/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-storybook-

  interaction-and-accessibility-tests:
    runs-on: ubuntu-latest
    needs: [install-dependencies, build-storybook]
    steps:
      - uses: actions/checkout@v3
      - name: Restore npm cache
        uses: actions/cache@v3
        id: restore-node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.restore-node_modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Install playwright
        run: npm ci playwright
      - name: Restore storybook cache
        uses: actions/cache@v3
        id: restore-storybook
        with:
          path: |
            **/storybook-static
          key: ${{ runner.os }}-storybook-${{ hashFiles('src/components/*.tsx') }}
      - name: Build storybook
        if: steps.restore-storybook.outputs.cache-hit != 'true'
        run: npm run build-storybook
      - name: Serve Storybook and run tests
        run: |
          npm i concurrently wait-on
          npx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" "npm run storybook" "npx wait-on tcp:6006 && npm run test-storybook"

  visual-and-composition-tests:
    runs-on: ubuntu-latest
    needs: build-storybook
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Restore npm cache
        uses: actions/cache@v3
        id: restore-node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.restore-node_modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Restore storybook build cache
        uses: actions/cache@v3
        id: restore-storybook
        with:
          path: |
            storybook-static
          key: ${{ runner.os }}-storybook-${{ hashFiles('src/components/*.tsx') }}
      - name: Build storybook
        if: steps.restore-storybook.outputs.cache-hit != 'true'
        run: npm run build-storybook
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          storybookBuildDir: 'storybook-static'
